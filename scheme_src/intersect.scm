(define (foldl a fun lst)
  (cond
   ((null? lst) a)
   (else (foldl (fun (car lst) a) fun (cdr lst)))))
(define (member? a lst)
  (foldl #f (lambda (b r) (or r (= a b))) lst))
(define (reverse lst)
  (foldl '() cons lst))
(define (filter fun lst)
  (reverse
   (foldl '() (lambda (a r)
                (if (fun a)
                    (cons a r)
                    r))
          lst)))
(define (sub lst-a lst-b)
  (filter (lambda (a) (not (member? a lst-b)))
          lst-a))
(define (intersect lst-a lst-b)
  (sub lst-a (sub lst-a lst-b)))
(display (intersect '(1 6 2 3) '(2 3 4 5 6)))
